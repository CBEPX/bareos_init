# Include subfiles associated with configuration of clients.
# They define the bulk of the Clients, Jobs, and FileSets.
# Remember to "reload" the Director after adding a client file.
#
# @|"sh -c 'for f in /etc/bareos/clientdefs/*.conf ; do echo @${f} ; done'"



Director {
	Name					        = XXX_DIRECTOR_NAME_XXX
	Description				    = "Director Bareos backup server"
	Password				      = XXX_DIRECTOR_PASS_XXX
	Script Directory		  = "/etc/bareos/scripts"
	QueryFile				      = "/etc/bareos/scripts/query.sql"
	WorkingDirectory		  = "/var/lib/bareos"
	PidDirectory			    = "/var/run/bareos"
	Messages				      = XXX_MESSAGES_NAME_XXX	              # Тут указвается один из ресурсов Messages {}
  Dir Address           = 10.1.1.161
  Dir Port              = 9101
	FD Connect Timeout		= 30 minutes
	SD Connect Timeout		= 30 minutes
	Maximum Concurrent Jobs	  = 1
	MaximumConsoleConnections = 20
	Statistics Retention      = 3 years
}

Catalog {				# описание интерфейса с РСУБД для данного задания
  Name          = catalog_mysql
  #Description  = "Основной каталог"
  DB Address    = 127.0.0.1
  DB Port       = 3306
  DB Driver     = "mysql"                           # postgresql | mysql | sqlite
  DB Name       = "bareos-database-"
  DB User       = "bareosdatabasecommon"
  DB Password   = "XXX_MYSQL_DB_USER_PASS_XXX"
  DB Socket     = /var/run/mysqld/mysqld.sock       # only for MySQL
}

Console {				# права доступа для именованной консоли; по умолчанию - права отсутствуют, восстанавливать 
								# можно только в место по умолчанию; рекомендуется завести отдельную консоль для монитора 
								# с пустыми ACL и списком команд "status, .status" (CommandACL = "status, .status")
	Name					= XXX_CONSOLE_NAME_XXX
  Description   = "Главная консоль для управления bareos, как правило стоит на сервере или у админа"
	Password			= XXX_CONSOLE_PASS_XXX
	JobACL				= *all*			# список через запятую имён ресурсов заданий, к которым имеет доступ данная консоль
	ClientACL			= *all*		  # можно использовать ключевое слово *all* (включая звезды)
	StorageACL		= *all*		  # можно названия ресурсов разделять запятыми
	ScheduleACL		= *all*	    # можно использовать несколько директив
	PoolACL				= *all*		  # 
	FileSetACL		= *all*		  # 
	CatalogACL		= *all*		  # 
	CommandACL		= *all*	    # список команд, к которым имеет доступ данная консоль; например: status
	WhereACL			= *all*			# куда можно восстанавливать файлы; можно использовать ключевое слово "all"; 
														# "/" означает восстановление на исходное место; можно использовать несколько директив
}

Console {       # заготовка для мониторинга (например, bareos-tray-monitor) 
  Name          = XXX_CONSOLE_MONITORING_NAME_XXX
  Password      = XXX_CONSOLE_MONITORING_PASS_XXX
  CommandACL    = status, .status 
} 

JobDefs {                       # Настройки по умолчанию для заданий, они также могут быть использованы в Job {}
  Name                          = job_default
  Type                          = Backup        # см. в Job {}
  Level                         = Full          # см. в Job {}
  Catalog                       = catalog_mysql # имя ресурса Catalog {} 
  Messages                      = XXX_MESSAGES_NAME_XXX  # см. в Job {}
  Write Bootstrap               = "/var/lib/bareos/\%c_\%n.bsr"
	Maximum Concurrent Jobs	      = 1					    # кол-во параллельно выполняемых заданий с этим именем
	Priority				              = 10	          # приоритет задания, по умолчанию 10, чем нижe, тем выше приоритет
	Reschedule On Error		        = yes						# при ошибочном завершении заново запланировать выполнение задания 
														                    # с учётом интервала и количества повторений (Reschedule Interval and Reschedule Times)
	Reschedule Interval		        = 30 minutes		# интервал между попытками
	Reschedule Times		          = 3						  # кол-во попыток; 0 = бесконечно
	Allow Duplicate Jobs	        = no            # разрешить запускать два и более заданий одновременно
	Allow Higher Duplicates	      = yes					  # если дубликаты запрещены, то выбрать задание с высшим приоритетом (требует Allow Duplicate Jobs	= no ?)
	Allow Mixed Priority	        = no						# запускать по расписанию, не смотря на приоритет
	Cancel Lower Level Duplicates = yes           # из запущенных дубликатов отменить задание с более низким приоритетом (требует Allow Duplicate Jobs	= no)
	Cancel Queued Duplicates      = no 				    # если дубликаты запрещены и в очереди уже стоит задание с тем же именем, то прервать его (требует Allow Duplicate Jobs	= no)
	Cancel Running Duplicates     = no				    # если дубликаты запрещены и задание с тем же именем уже выполняется, то прервать его (требует Allow Duplicate Jobs	= no)
	Rerun Failed Levels		        = yes   		    # если пред. задание более высокого уровня (full или diff) завершилось неудачно, 
                                                # то текущее задание будет повышено до более высого уровня
	Max Start Delay			          = 12 hours		  # максимальное время ожидания в очереди на запуск
	Max Run Time			            = 36 hours			# максимальное время выполнения задания (без учета Max Start Delay)
	Max Wait Time			            = 30 minutes		# сколько ждать ответа от File or Storage Daemon (когда задание уже запущено)
  #Maxrun Sched Time            = 48 hours       # как долго задание может выполняться, начиная от запланированного времени 
                                                # (Max Start Delay + Max Run Time)
  Full Max Runtime              = 36 hours      # как долго может выполняться, аналог Max Run Time для Full (считаем, что зависло задание)
  Differential Max Runtime      = 36 hours      # как долго может выполняться, аналог Max Run Time для Diff. (считаем, что зависло задание)
  Incremental Max Runtime       = 36 hours      # как долго может выполняться, аналог Max Run Time для Inc. (считаем, что зависло задание)
  Prune Files                   = yes           # переопределяет AutoPrune в ресурсе Client {}
  Prune Jobs                    = yes           # переопределяет AutoPrune в ресурсе Client {}
  Prune Volumes                 = yes           # переопределяет AutoPrune в ресурсе Pool {}
  #Dir Plugin Options           = <string-list> # опции для плагинов director'a
  #SD Plugin Options            = <string-list> # опции для плагинов storage_daemon'a
  #FD Plugin Options            = <string-list> # опции для плагинов file_daemon'a
}

Job {                           # задание для восстановления файлов (должно быть, чтобы можно было восстанавливать)
  Name							            = JobRestore
  Type							            = Restore
  Client						            = ClientRestore
  FileSet						            = FileSetRestore
  Storage						            = StorageRestore
  Pool							            = PoolRestore
  Messages						          = XXX_MESSAGES_NAME_XXX
	Where					                = /tmp/bareos-restores  # куда восстанавливать файл, по умолчанию
														                            # если указать только '/', то восстановление будет происходить на прежнее место
  #	Add Prefix                  = directory				      # add a prefix to all files when restoring 
                                                        # (like where) (can't be used with where=)
	#Add Suffix				            = extention					    # Using Add Suffix=.old, /etc/passwd will be restored to /etc/passwsd.old 
	#Strip Prefix			            = directory					    # Using Strip Prefix=/etc, /etc/passwd will be restored to /passwd
	#RegexWhere				            = expressions				    # RegExp для переименования файлов при восстановлении
	#Replace				              = replace-option        # Что делать, если файл существует
		                                                    # always	- всегда переписывать
                                                    		# ifnewer	- переписать, если из бэкапа новее
                                                    		# ifolder	- переписать, если из бэкапа старее
                                                    		# never		- никогда не переписывать
	#Prefix Links			            = no						        # Симлинки будут модифицироваться в соответствии с Where
  #Bootstrap                    = /path/to/bootstrap_file.bsr   # Использовать этот bootstrap файл
}



# ---> (ДЛЯ УДОБСТВА) ВСЕ ЗАДАНИЯ ВЫНОШУ В ОТДЕЛЬНЫЕ ФАЙЛЫ, 1 ФАЙЛ = 1 ЗАДАНИЕ
# ---> В ФАЙЛ ЗАДАНИЯ ВХОДЯТ РЕСУРСЫ: Client, FileSet, Job, Pool (обычно несколько), Schedule, Storage
# ---> ПОДКЛЮЧАЮ ЗАДАНИЯ ТАК:
# ---> @/etc/bareos/bareos-dir.conf.d/name1.conf
# ---> @/etc/bareos/bareos-dir.conf.d/name2.conf

# ---> РЕСУРС Job{} ОСТАЛЕН ДЛЯ СПРАВКИ, ЧТОБЫ НЕ ПРЫГАТЬ ПО ФАЙЛАМ, ЕСЛИ НАДО ПОДПРАВИТЬ JobDefs{}
# ---> В ИТОГОВОМ ФАЙЛЕ bareos-dir.conf ОН НЕ НУЖЕН

#Job {                           # Настройки для конкретного задания, они также могут быть использованы в JobDef {}
#	Enabled					              = yes
#	JobDefs				                = job_default   		# шаблон задания (ресурс JobDefs), используется в качестве умолчания
#	Name					                = job_name
#  Description                   = "Описание задания // просто комментарий"
#	Type					                = Backup            # Backup | Restore | Verify 
#	Level					                = Full	            # Full | Incremental | Differential | VirtualFull (какой уровень использовать по умолчанию)
#                                                    # VirtualFull - собирает полную копию из текущих полной, дифференциальных и инкрементальных
#  # Level                       = <verify>          # проверка копий, может быть:
#                                                    # InitCatalog       - инициирует список файлов с их аттрибутами и сохраняет в БД (аля tripwire)
#                                                    # Catalog           - сравнивает текущее состояние файлов с ранее сохранненной информацией, 
#                                                                        # полученной при выполнении InitCatalog
#                                                    # VolumeToCatalog   - читает атрибуты файлов из тома и сравнивает с последней резервной копией 
#                                                                        # (файлы будут распакованы на диск, после чего проверяться, 
#                                                                        # поэтому обязательно нужен рабочий клиент)
#                                                    # DiskToCatalog     - читает файлы и их атрибуты с диска клиента и сравнивает 
#                                                                        # с последней резервной копией
#	# Accurate			              = yes	              # чтобы файловый демон знал, какие файлы были перемещены/удалены. 
#                                                    # На 500К файлов требуется ~64 Mb RAM.
#  # Job To Verify               = job-resouce-name  # ???
#  # Verify Job                  = job-resource-name # имя ресурса job {}, который использовать для проверки данного задания
#                                                    # позволяет, например, проверять бэкап после выполнения (обычно level = VolumeToCatalog)
#  Catalog                       = catalog-resource-name	    # имя ресурса Catalog {} (оптимально указать в JobDefs)
#	client					              = client-resource-name	    # имя ресурса Client {}
#	FileSet					              = fileset-resource-name	    # имя ресурса FileSet {}
#	Messages				              = messages-resource-name    # имя ресурса Messages {}
#	Schedule				              = schedule-name				      # расписание (если не указать, то запуск возможен только вручную)
#	Storage					              = storage-resource-name		  # имя ресурса Storage {}
#	Pool						              = pool-resource-name	      # имя ресурса Pool {}
#  # Next Pool                   = <pool-resource-name>      # A Next Pool override used for Migration/Copy and Virtual Backup Jobs.  
#  # Max Concurrent Copies       = 100                       # ??? (default 100)
#  Full Backup Pool              = pool-resource-name        # Pool для полных заданий (имеет приоритет над Pool)
#  Virtual Full Backup Pool      = pool-resource-name        # Pool для virtual full заданий (имеет приоритет над Pool)
#	Max Full Interval		          = 7 days					          # с какой частотой делать обязательную полную копию (если 0 - никогда)
#  Max Virtual Full Interval     = 7 days                    # с какой частотой делать обязательную virtual full копию (если 0 - никогда)
#  Differential Backup Pool      = pool-resource-name        # Pool для дифференциальных заданий (имеет приоритет над Pool)
#	Max Diff Interval		          = 7 days					          # с какой частотой делать обязательную дифференциальную копию (если 0 - никогда)
#  Incremental Backup Pool       = pool-resource-name        # Pool для инкрементальных заданий (имеет приоритет над Pool)
#  #Maximum Bandwidth            = 10 mb/s                   # ограничение скорости сети (k/s, kb/s, m/s, mb/s)
#  # Write Bootstrap             = /path/to/bootstrap_file.bsr   # где хранить bootstrap файл для этого задания 
#                                                            # (можно указать в JobDefs "/path/to/\%c_\%n.bsr")
#  # Write Verify List           = <directory>               # ??? (нет описания)
#
#  # run = "Nightly-backup level=%l since=\"%s\" storage=DDS-4"     # Толком не понял -> 
#                                        # http://doc.bareos.org/master/html/bareos-manual-main-reference.html#directiveDirJobRun
#
#	#RunScript {										                          # запуск скрипт до\после выполнения задания
#		#Runs When			            = Never 					          # When run commands (may be one of -> Before|After|Always|AfterVSS)
#		#Runs On Success	          = Yes						            # Run command if JobStatus is successful
#		#Runs On Failure 	          = No  						          # Run command if JobStatus isn't successful
#		#Runs On Client 	          = Yes 						          # Run command on client
#		#Fail Job On Error 	        = Yes   				            # Fail job if script returns something different from 0
#		#Console 	  	  	          = ""						            # Console command
#		#Command 	  	  	          = ""					              # Path to your script 
#														                                # В windows пути надо указывать прямым слешем (/), а не обратным (\)
#														                                # example: "\"C:/Program Files/Bareos/systemstate.bat\""
#														                                # В batch-скриптах надо в конце явно указывать 'exit 0', иначе считается, 
#														                                # что скрипт отработал НЕ успешно
#
#                        			  # Можно испольщзовать следующие подстановочные знаки (переменные):
#                                # Variable    Description
#                                # -----------------------
#                                # \%c         Client’s Name
#                                # \%d         Director’s Name
#                                # \%e         Job Exit Code
#                            	      # * OK
#                                		# * Error
#                                		# * Fatal Error
#                         			      # * Canceled
#                         			      # * Differences
#                        			      # * Unknown term code
#                                # \%i         JobId
#                                # \%j         Unique JobId
#                                # \%l         Job Level
#                                # \%n         Unadorned Job Name
#                                # \%r         Recipients
#                                # \%s         Since Time
#                                # \%b         Job Bytes
#                                # \%f         Job Files
#                                # \%t         Job Type (Backup, ...)
#                                # \%v         Read Volume Name (only on Director)
#                                # \%V         Write Volume Name (only on Director) 
#	#}
#
## Можно использовать следующие сокращения (для RunScript):
##	------------------------------------------------------------------------------------------------------ #
##	Keyword 								|RunsOnSuccess 	|RunsOnFailure 	|FailJobOnError 	|Runs On Client 	|RunsWhen  #
##	------------------------------------------------------------------------------------------------------ #
##	Run Before Job 	  	  	|-							|-							|Yes 							|No 							|Before		 #
##	Run After Job 					|Yes 						|No 	  				|-								|No 							|After		 #
##	Run After Failed Job 		|No 						|Yes 	  				|-								|No 							|After		 #
##	Client Run Before Job 	|-							|-							|Yes 							|Yes 							|Before		 #
##	Client Run After Job 		|Yes 						|No 	  				|-								|Yes 							|After		 #
##	------------------------------------------------------------------------------------------------------ #
## Пример:
## Client Run Before Job = "/usr/scripts/mysql_dump.sh"
#}

Messages {
	  Name					  = XXX_MESSAGES_NAME_XXX
    MailCommand     = "/usr/bin/bsmtp -8 -h mail.klgd.ru -f \"Bareos Server \<bareos@klgd.ru\>\" -s \"%e \:\: %c \:\: %t %l \(Bareos\)\" %r"
    OperatorCommand = "/usr/bin/bsmtp -8 -h mail.klgd.ru -f \"Bareos Server \<bareos@klgd.ru\>\" -s \"Bareos: Intervention needed for %j\" %r"
        # Variable    Description
        # -----------------------
        # \%c         Client’s Name
        # \%d         Director’s Name
        # \%e         Job Exit Code (OK, Error, ...)
        # \%i         JobId
        # \%j         Unique Job Id
        # \%l         Job Level
        # \%n         Unadorned Job Name
        # \%s         Since Time
        # \%t         Job Type (Backup, ...)
        # \%r         Recipients
        # \%v         Read Volume Name
        # \%V         Write Volume Name
        # \%b         Job Bytes
        # \%F         Job Files 

	  #stdout			= message-type1, message-type2, ...
	  #stderr			= message-type1, message-type2, ...
	  console			= all, !skipped, !saved, !restored
	  #console			= message-type1, message-type2, ...			# имеется в виду консоль bareos
    catalog			= all, !skipped
    #catalog			= message-type1, message-type2, ...			# записываются в СУБД в таблицу Log; очищается одновременно с удалением записи о задании
    #syslog			= all, !skipped, !saved, !restored
    #director		= имя директора	= message-type1, message-type2, ...
    director		= XXX_DIRECTOR_NAME_XXX								= all
    #file			  = имя файла							= message-type1, message-type2, ...	# файл перезаписывается
    append			= /var/log/bareos.log 	= all, !skipped     # надо регулярно чиститься, например, поместить
			              																				# отредактированный scripts/logrotate 
										                												# в /etc/logrotate.d/bareos; 
																		                				# для обработки смотри scripts/logwatch/
    mail							= admon@example.org										= all, !skipped, !saved
    #mail			= список получателей через запятую	= message-type1, message-type2, ...
    #mail on error	= список получателей через запятую	= message-type1, message-type2, ...
    #mail on success	= список получателей через запятую	= message-type1, message-type2, ...
    operator				  = admon@example.org										= mount, alert, terminate
    #operator		= список получателей через запятую	= message-type1, message-type2, ...	# сообщения не группируются, а посылаются поштучно
    
				# message-type может быть (можно использовать инверсию, например, !all):
					# info
					# warning
					# error (задание продолжает выполняться)
					# fatal (задание пришлось снять)
					# terminate (сервер остановлен)
					# saved (?; список скопированных файлов; не надо посылать эти записи на консоль!)
					# notsaved (список файлов, которые не удалось скопировать)
					# skipped (список файлов, которые были пропущены при копировании согласно настройке; 
								# не надо посылать эти записи на консоль, в журнал или почту)
					# mount (требования к оператору смонтировать том)
					# restored (список восстановленных файлов; в формате "ls -l")
					# all
					# security (нарушения авторизации, реализовано в 2.2)
					# alert (проблема с лентой)
					# volmgmt (не реализовано)
}

# vim:syntax=bacula:ts=2
